// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/register-participation-keys/{address})
	RegisterParticipationKeys(ctx echo.Context, address string, params RegisterParticipationKeysParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameter("simple", false, "catchpoint", ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// RegisterParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterParticipationKeys(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":           true,
		"fee":              true,
		"key-dilution":     true,
		"round-last-valid": true,
		"no-wait":          true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameter("simple", false, "address", ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterParticipationKeysParams
	// ------------- Optional query parameter "fee" -------------
	if paramValue := ctx.QueryParam("fee"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "fee", ctx.QueryParams(), &params.Fee)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fee: %s", err))
	}

	// ------------- Optional query parameter "key-dilution" -------------
	if paramValue := ctx.QueryParam("key-dilution"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "key-dilution", ctx.QueryParams(), &params.KeyDilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key-dilution: %s", err))
	}

	// ------------- Optional query parameter "round-last-valid" -------------
	if paramValue := ctx.QueryParam("round-last-valid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round-last-valid", ctx.QueryParams(), &params.RoundLastValid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-last-valid: %s", err))
	}

	// ------------- Optional query parameter "no-wait" -------------
	if paramValue := ctx.QueryParam("no-wait"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "no-wait", ctx.QueryParams(), &params.NoWait)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter no-wait: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegisterParticipationKeys(ctx, address, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":  true,
		"timeout": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	ctx.Set("api_key.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------
	if paramValue := ctx.QueryParam("timeout"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE("/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST("/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST("/v2/register-participation-keys/:address", wrapper.RegisterParticipationKeys, m...)
	router.POST("/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fPiuIep7LwKeuDfvbv43AAD//59b4KPAhQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
